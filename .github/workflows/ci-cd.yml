name: Sentiment Analysis CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: 16
  PYTHON_VERSION: 3.8

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      lambda: ${{ steps.filter.outputs.lambda }}
    steps:
    - uses: actions/checkout@v2
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          frontend:
            - 'frontend/**'
          lambda:
            - 'lambda/**'

    - name: Debug Changes Detection
      run: |
        echo "Frontend change detected: ${{ steps.filter.outputs.frontend }}"
        echo "Lambda change detected: ${{ steps.filter.outputs.lambda }}"

  security-scan:
    needs: changes
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install frontend dependencies
      if: ${{ needs.changes.outputs.frontend == 'true' }}
      working-directory: frontend
      run: |
        npm ci

    - name: Run Snyk to check for vulnerabilities (Frontend)
      if: ${{ needs.changes.outputs.frontend == 'true' }}
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        command: test
        args: --file=frontend/package.json --severity-threshold=high

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      if: ${{ needs.changes.outputs.lambda == 'true' }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Python dependencies for Lambda
      if: ${{ needs.changes.outputs.lambda == 'true' }}
      working-directory: lambda
      run: |
        pip install -r requirements.txt

    - name: Run Snyk to check for vulnerabilities (Lambda)
      if: ${{ needs.changes.outputs.lambda == 'true' }}
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        command: test
        args: --file=lambda/requirements.txt --severity-threshold=high

  test-frontend:
    needs: [changes, security-scan]
    if: ${{ needs.changes.outputs.frontend == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: Cache npm dependencies
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.OS }}-node-
    - name: Install dependencies
      working-directory: frontend
      run: npm ci
    - name: Run tests
      working-directory: frontend
      run: npm test

  test-lambda:
    needs: [changes, security-scan]
    if: ${{ needs.changes.outputs.lambda == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Cache pip dependencies
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        cd lambda
        pip install -r requirements.txt
        pip install pytest
    - name: Run tests
      env:
        AWS_DEFAULT_REGION: 'us-east-1'
        SAGEMAKER_ENDPOINT_NAME: 'mock-endpoint'
      run: |
        cd lambda
        pytest

  performance-test-lambda:
    needs: [test-lambda]
    if: ${{ needs.changes.outputs.lambda == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install dependencies
      run: |
        cd lambda
        pip install -r requirements.txt
        pip install locust
    - name: Run performance tests
      run: |
        cd lambda
        locust --headless -f performance_test.py --users 10 --spawn-rate 1 -t 1m

  build-and-deploy:
    needs: [test-frontend, test-lambda, performance-test-lambda]
    if: ${{ always() && (needs.changes.outputs.frontend == 'true' || needs.changes.outputs.lambda == 'true') }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    # Frontend build and deploy
    - name: Use Node.js ${{ env.NODE_VERSION }}
      if: ${{ needs.changes.outputs.frontend == 'true' }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: Build Frontend
      if: ${{ needs.changes.outputs.frontend == 'true' }}
      run: |
        cd frontend
        npm ci
        echo 'REACT_APP_API_GATEWAY_ENDPOINT=${{ secrets.API_GATEWAY_ENDPOINT }}' > .env
        npm run build
    
    # Lambda build
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      if: ${{ needs.changes.outputs.lambda == 'true' }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Build Lambda
      if: ${{ needs.changes.outputs.lambda == 'true' }}
      run: |
        cd lambda
        pip install -r requirements.txt -t .
        zip -r ../lambda_function.zip .
    
    # AWS configuration and deployment
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-2
    
    - name: Deploy Frontend to S3
      if: ${{ needs.changes.outputs.frontend == 'true' }}
      run: |
        echo "Deploying frontend to S3..."
        aws s3 sync frontend/build/ s3://${{ secrets.S3_BUCKET }} --delete --debug
        echo "Frontend deployment completed."
    
    - name: Deploy Lambda
      if: ${{ needs.changes.outputs.lambda == 'true' }}
      run: |
        echo "Deploying Lambda function..."
        VERSION=$(date +%Y%m%d%H%M%S)
        aws lambda update-function-code --function-name ${{ secrets.LAMBDA_FUNCTION_NAME }} --zip-file fileb://lambda_function.zip --debug
        aws lambda publish-version --function-name ${{ secrets.LAMBDA_FUNCTION_NAME }} --description "Version $VERSION" --debug
        aws lambda update-function-configuration --function-name ${{ secrets.LAMBDA_FUNCTION_NAME }} --environment "Variables={SAGEMAKER_ENDPOINT_NAME=${{ secrets.SAGEMAKER_ENDPOINT_NAME }}}" --debug
        echo "Lambda deployment completed."

  # notify:
  #   needs: build-and-deploy
  #   if: always()
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Notify Slack
  #     uses: 8398a7/action-slack@v3
  #     with:
  #       status: ${{ job.status }}
  #       text: Deployment ${{ job.status == 'success' && 'succeeded' || 'failed' }}!
  #       webhook_url: ${{ secrets.SLACK_WEBHOOK }}
